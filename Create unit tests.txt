Here is c# class "StudentConverte":

    public class StudentConverte
    {
        public List<Student> ConvertStudents(List<Student> students)
        {
            return students.Select(student =>
            {
                var result = new Student
                {
                    Name = student.Name,
                    Age = student.Age,
                    Grade = student.Grade
                };

                if (student.Grade > 90)
                {
                    if (student.Age < 21)
                    {
                        result.Exceptional = true;
                    }
                    else
                    {
                        result.HonorRoll = true;
                    }
                }
                else if (student.Grade > 70)
                {
                    result.Passed = true;
                }
                else
                {
                    result.Passed = false;
                }

                return result;

            }).ToList();
        }
    }
	
where "Student" is class:

    public class Student
    {
        public string Name { get; set; }

        public int Age { get; set; }

        public int Grade { get; set; }

        public bool Exceptional { get; set; }

        public bool HonorRoll { get; set; }

        public bool Passed { get; set; }
    }
	
Please write unit tests for class "StudentConverte"
by using xUnit library and by using next test cases:

Positive Test Cases: 

Case 1: High Achiever 
Given an array with a student object of age 21 or above and grade above 90, the function should return an object with the additional field HonorRoll = true. 

Case 2: Exceptional Young High Achiever 
Given an array with a student object of age less than 21 and grade above 90, the function should return an object with the additional field Exceptional = true. 

Case 3: Passed Student 
Given an array with a student object of grade between 71 and 90 (inclusive), the function should return an object with the additional field Passed = true. 

Case 4: Failed Student 
Given an array with a student object of grade 70 or less, the function should return an object with the additional field Passed = false. 

Negative Test Cases: 

Case 1: Empty Array 
Given an empty array, the function should return an empty array. 

Case 2: Not an Array  
Given a null as an input the function should throw an error. 

?

Please rewrite your unit test class "StudentConverteTests" that you just wrote above by using "SetUp" method for xUnit library 
and initialize the object "StudentConverte" in this "SetUp" method?


=====================================================================================================================================================
=====================================================================================================================================================

Here is c# class "PlayerAnalyzer":

    public class PlayerAnalyzer
    {
        public double CalculateScore(List<Player> players)
        {
            double score = 0;

            foreach (var player in players)
            {
                double skillsAverage = player.Skills.Sum() / (double)player.Skills.Count;
                double contribution = player.Age * player.Experience * skillsAverage;

                if (player.Age < 18)
                {
                    contribution *= 0.5;
                }

                if (player.Experience > 10)
                {
                    contribution *= 1.2;
                }

                score += contribution;
            }

            return score;
        }
    }
	
where "Player" is class:

    public class Player
    {
        public string Name { get; set; }

        public int Age { get; set; }

        public int Experience { get; set; }

        public List<int> Skills { get; set; }

    }
	
Please write unit tests for class "PlayerAnalyzer"
by using the xUnit library and by using the next test cases:

Positive Test Cases: 

Case 1: Normal Player 

Given an array with a single player object with age 25, experience 5 years, and skills [2, 2, 2], the function should return a score. 

Case 2: Junior Player 

Given an array with a single player object with age 15, experience 3 years, and skills [3, 3, 3], the function should return a score. 

Case 3: Senior Player 

Given an array with a single player object with age 35, experience 15 years, and skills [4, 4, 4], the function should return a score. 

Case 4: Multiple Players 

Given an array with multiple player objects, the function should return the sum of their scores. 

Negative Test Cases: 

Case 1: Skills is null 

Given an array with a player where Skills property is null, the function should throw an error 

Case 2: Empty Array 

Given an empty array, the function should return 0 (since there are no players to contribute to the score). 
?

Please use the constructor for unit test class and initialize the object of "PlayerAnalyzer" in this constructor 
?